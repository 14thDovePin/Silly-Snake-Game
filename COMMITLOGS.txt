TODO LIST
- add death logic when hitting edge
- add fps & ups on screen

- implement menu
- implement score system



Implemented snake out of field system.

- implemented logic when snake goes
  out of field or hits edge
- implement a check if a coordinate
  is outside the playing field
- updated todo list
- refactored code



Implemented snake self bite system.

- fixed previously mentioned bug
- found bug of misaligned checkerboard again.
  might be snake alignment instead.
- implemented segment placement opposite of the snake's moving
  direction to prevent segment stacking and causing infinite respawn.
- implemented a function to check if snake bit itself.
- restructured snake respawn mechanic
- refactored code



Implemented respawn system.

- implemented a simple snake respawn button.
- fixed bug where the random spawn of the snake
  on the top or bottom makes it direction face
  towards the nearest wall instead of the opposite.
- updated todo list
- refactored code



Implemented snake spawn randomization and direction guidance.

- implemented direction priority based from snake's starting zone.
- implemented randomization on starting position of snake
- updated todo list
- fixed bug that can misalign the playing field.
- refactored code



Implemented segments into snake.

- rearranged a bit of code.
- found bug from `PlayingField` not centering the squares
  within grid with regards to the set `cell_margin`.
  regards to set
- updated class docstring.
- updated `.gitignore` to exclude vscode related files.
- fixed annoying bugs that causes weird behavior
  caused by changing local variables instead of
  the intended values from the dict.
- reconstructed movement and drawing
  of the snake to fit new changes.
- restructured snake into a dict of list of Rect
  and Vector2 to accomodate multiple segments.
- refactored code



Fixed and refactored code.

- fixed a wrong attribute being sent from PlayingField to Snake...
  p.s. took me 15 mins of tracing when the problem wasnt even in
  the scope LMAO. Lesson learned to always take the necessary back
  tracing or back stepping to figure things out lol lol.
- deprecated unused code lol
- fixed dynamic generation of playing field
  that can improperly color the field.
- udpated todo list
- refactored code



Restructured the data for the playing field.

- changed blueprint for datastructure of the cells
- removed unused functions
- updated colors
- refactored code




Implemented a dynamic playing area.

- added new class and file for the playing field.
- implemented field construction and creation
- hooked up relevant information with snake
- updated colors
- updated todo list
- refactored code



Implemented input buffer for snake movement.

- reimplementing/fixing the input buffer
- segregated the clocks for both ups and fps
- refactored code



Restructured main loop and display update.

- segregated the structure of the loop
  give display update its own flow.
- added a temporary movement to the snake
- refactored code



Refactored Code

- attempted to create an input buffer system.
- added a movement control buffer/queue for more control feel.
- refactored code



Added automatic movement and direction control to snake.

- added direction control to snake
- added automatic movement to snake
- added instant turn direction for more feel of control
- fixed snake bug that lets you turn 180Â°
- refactored code.



Created a basic moving box.

- Created file/s:
  + snake.py
  + udpate.py
- Added rectangle and velocity to snake as
  well as drawing and input capabilities.
- Added FPS to the window title.
-
- refactored code.



Added basic key movements.

- Added basic key movements.
- Added/refined comments.
- Refactored code.



Added external methods.

- Created 2 files: `display.py` and `input.py`.
- Implemented display and input methods.



Implemented Pygame

- Created a todo list.
- Implemented pygame at a very basic level.



Template's Initial Commit

- Added the following files:
  + .gitignore
  + COMMITLOGS.txt
  + LICENSE
  + main.py
  + README.md
- License used is the MIT License.
- Added a basic code block within `main.py`.
- Added contents to `README.md`.
